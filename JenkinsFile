pipeline {
  agent any
  
  environment {
    DOCKER_IMAGE = 'bank-management-system'
    DOCKER_TAG = "${env.BUILD_ID}"
  }
  
  stages {
    stage('Workspace Cleanup') {
      steps {
        cleanWs()
        echo 'Cleaning workspace...'
      }
    }
    
    stage('Checkout Git Branch') {
      steps {
        checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'github-credentials', url: 'https://github.com/RutujaBangera/BankManagementSystem.git']])
      }
    }
    
    stage('Build Docker Image') {
      steps {
        script {
          sh 'docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
          sh 'docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest'
        }
        echo 'Docker image built successfully!'
      }
    }
    
    stage('Run Tests') {
      steps {
        script {
          sh '''
            docker run --name test-container \
              -e MYSQL_HOST=dummy \
              -e MYSQL_DATABASE=test_bank \
              ${DOCKER_IMAGE}:${DOCKER_TAG} \
              pytest --junitxml=test-results.xml
          '''
          sh 'docker cp test-container:/app/test-results.xml .'
          sh 'docker rm test-container'
        }
        echo 'Tests completed!'
      }
      post {
        success {
          echo 'Tests passed successfully!'
        }
        failure {
          echo 'Tests failed! Check test-results.xml for details.'
        }
      }
    }
    
    stage('Deploy to Test Environment') {
      steps {
        echo 'Deploying to test environment...'
        sh 'docker-compose up -d'
      }
    }
  }
  
  post {
    always {
      echo 'Pipeline execution completed.'
      archiveArtifacts artifacts: 'test-results.xml', fingerprint: true, allowEmptyArchive: true
    }
    success {
      echo 'Pipeline succeeded! Application is deployed and running.'
    }
    failure {
      echo 'Pipeline failed! Check the logs for details.'
    }
  }
}
