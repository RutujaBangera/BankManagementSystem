pipeline {
    agent {
        label 'windows'  // Use your Windows agent
    }

    environment {
        DOCKER_IMAGE_NAME = 'omalve/bank-management-system'  
        DOCKER_TAG        = "${env.BUILD_ID}"               
        FULL_IMAGE_NAME   = "${env.DOCKER_IMAGE_NAME}:${env.DOCKER_TAG}"

        EC2_HOST = 'ec2-65-2-150-23.ap-south-1.compute.amazonaws.com'
        EC2_USER = 'ubuntu'
        SSH_KEY  = 'C:\\jenkins-agent\\.ssh\\bms.pem'  // Updated path for Windows
    }

    stages {
        stage('Workspace Cleanup') {
            steps {
                cleanWs()
                echo 'Cleaning workspace...'
            }
        }

        stage('Checkout Git Branch') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/docker-support']],
                    userRemoteConfigs: [[
                        credentialsId: 'github-credentials',
                        url: 'https://github.com/Om-Alve/BankManagementSystem.git'
                    ]]
                )
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def img = env.FULL_IMAGE_NAME
                    bat "docker build -t ${img} ."
                }
                echo "Docker image ${env.FULL_IMAGE_NAME} built successfully!"
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // inside this block Jenkins will automatically log in, push, then log out
                    docker.withRegistry('https://registry-1.docker.io/', 'docker-hub-credentials') {
                        docker.image(env.FULL_IMAGE_NAME).push()
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    bat 'docker compose -f docker-compose.test.yml build --no-cache'
                    bat 'docker compose -f docker-compose.test.yml up --abort-on-container-exit'
                    bat 'docker cp bankmanagementsystem_pipeline-test-app-1:/app/test-results.xml .'
                    bat 'docker compose -f docker-compose.test.yml down'
                }
                echo 'Tests completed!'
            }
            post {
                success { echo 'Tests passed successfully!' }
                failure { echo 'Tests failed! Check test-results.xml for details.' }
            }
        }

        stage('Deploy to EC2') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker-hub-credentials',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    script {
                        def user = env.EC2_USER
                        def host = env.EC2_HOST
                        def key  = env.SSH_KEY
                        def img  = env.FULL_IMAGE_NAME

                        // Compose the remote SSH command for Windows
                        def remote = [
                            "echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin",
                            "docker pull ${img}",
                            "docker stop bank-app || true",
                            "docker rm bank-app || true",
                            "docker run -d --name bank-app -p 80:5000 ${img}"
                        ].join(" && ")

                        // On Windows, use double quotes and escape paths properly
                        bat "ssh -o StrictHostKeyChecking=no -i \"${key}\" ${user}@${host} \"${remote}\""
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
            archiveArtifacts artifacts: 'test-results.xml', fingerprint: true, allowEmptyArchive: true
        }
        success { echo 'Pipeline succeeded! Application is deployed and running.' }
        failure { echo 'Pipeline failed! Check the logs for details.' }
    }
}
